name: $(Date:yyyyMMdd)$(Rev:.r)

schedules:
  # at midnight every monday (UTC)
  - cron: 0 0 * * 0
    displayName: Weekly Release
    branches:
      include:
        - master


variables:
  build: '$(Build.BuildID)'
  system.debug: true
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  CI: true

# Run on all commits,  except for some folders
trigger:
  batch: true
  branches:
    include:
      - '*'
    exclude:
      - refs/tags/*
  paths:
    exclude:
    - docs/*
    - scripts/*
    - '**/*.md'

stages:
  - stage: build
    jobs:
      - template: build/azure-pipelines-build.yml
  - stage: release
    jobs:
      - job:
        displayName: Release
        variables:
          manualRelease: $( contains(variables['Build.SourceVersionMessage'], '[release]')
          weeklyRelease: $( eq(variables['Build.Reason'],'Schedule'))
        steps:
          - pwsh: Write-Host "##vso[task.complete result=Canceled;]Skipping release"
            # cancel the job, if
            # it is not a weekly release
            # and 
            # it is not a manual release
            condition: and(ne(weeklyRelease, true), ne(manualRelease, true)) 
            displayName: Cancel the release unless we want it to continue

          - checkout: self
            clean: true
            fetchDepth: 200
            lfs: false
            persistCredentials: true
            displayName: "Shallow cloning repo"
          
            # downloads to $(System.ArtifactsDirectory)
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              downloadType: all
            displayName: Download previous build artefacts

          - pwsh: |
              Get-ChildItem -recurse $(System.ArtifactsDirectory)
              Get-Content $(System.ArtifactsDirectory)/AP_version_vars.txt | Write-Output
            displayName: Reconstitute variables

          - pwsh: ./build/release_notes.ps1 v$(AP_Version) -update_changelog
            displayName: Generate release notes

          - pwsh: git add CHANGELOG.md; git commit -m "Update changelog for v$(AP_Version)" -m "[skip_ci]"
            displayName: Commit changelog

          - task: GitHubRelease@0
            inputs:
              action: create
              tagSource: auto
              tag: v$(AP_Version)
              title: $(AP_ReleaseTitle)
              releaseNotesSource: inputs
              releaseNotes: $(AP_ReleaseMessage)
              assets: |
                $(Build.ArtifactsDirectory)/**/*.zip
                $(Build.ArtifactsDirectory)/**/*.tar.xz
              isDraft: true
              isPreRelease: true

            
          